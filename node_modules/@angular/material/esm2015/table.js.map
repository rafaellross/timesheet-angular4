{"version":3,"file":"table.js","sources":["../../packages/material/table/table.js","../../packages/material/table/cell.js","../../packages/material/table/row.js","../../packages/material/table/table-module.js","../../packages/material/table/table-data-source.js","../../packages/material/table/index.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { CDK_TABLE_TEMPLATE, CdkTable } from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MatTable extends _MatTable {\n}\nMatTable.decorators = [\n    { type: Component, args: [{selector: 'mat-table',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                styles: [\".mat-table{display:block}.mat-header-row,.mat-row{display:flex;border-bottom-width:1px;border-bottom-style:solid;align-items:center;min-height:48px;padding:0 24px}.mat-cell,.mat-header-cell{flex:1;overflow:hidden;word-wrap:break-word}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/**\n * @nocollapse\n */\nMatTable.ctorParameters = () => [];\nfunction MatTable_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatTable.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatTable.ctorParameters;\n}\n//# sourceMappingURL=table.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { CdkCell, CdkCellDef, CdkColumnDef, CdkHeaderCell, CdkHeaderCellDef, } from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatCellDef = CdkCellDef;\nexport const /** @type {?} */ _MatHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MatColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MatHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MatCell = CdkCell;\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MatCellDef extends _MatCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] },\n];\n/**\n * @nocollapse\n */\nMatCellDef.ctorParameters = () => [];\nfunction MatCellDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatCellDef.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatCellDef.ctorParameters;\n}\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MatHeaderCellDef extends _MatHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * @nocollapse\n */\nMatHeaderCellDef.ctorParameters = () => [];\nfunction MatHeaderCellDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatHeaderCellDef.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatHeaderCellDef.ctorParameters;\n}\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport class MatColumnDef extends _MatColumnDef {\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                providers: [{ provide: CdkColumnDef, useExisting: MatColumnDef }],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatColumnDef.ctorParameters = () => [];\nMatColumnDef.propDecorators = {\n    'name': [{ type: Input, args: ['matColumnDef',] },],\n};\nfunction MatColumnDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatColumnDef.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatColumnDef.ctorParameters;\n    /** @type {?} */\n    MatColumnDef.propDecorators;\n    /**\n     * Unique name for this column.\n     * @type {?}\n     */\n    MatColumnDef.prototype.name;\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MatHeaderCell extends _MatHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(columnDef, elementRef, renderer) {\n        super(columnDef, elementRef, renderer);\n        renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMatHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef, },\n    { type: ElementRef, },\n    { type: Renderer2, },\n];\nfunction MatHeaderCell_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatHeaderCell.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatHeaderCell.ctorParameters;\n}\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MatCell extends _MatCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(columnDef, elementRef, renderer) {\n        super(columnDef, elementRef, renderer);\n        renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMatCell.ctorParameters = () => [\n    { type: CdkColumnDef, },\n    { type: ElementRef, },\n    { type: Renderer2, },\n];\nfunction MatCell_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatCell.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatCell.ctorParameters;\n}\n//# sourceMappingURL=cell.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, Directive, ViewEncapsulation } from '@angular/core';\nimport { CDK_ROW_TEMPLATE, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, } from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MatCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MatHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MatRow = CdkRow;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MatHeaderRowDef extends _MatHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef'],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatHeaderRowDef.ctorParameters = () => [];\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatHeaderRowDef.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatHeaderRowDef.ctorParameters;\n}\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport class MatRowDef extends _MatCdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatRowDef.ctorParameters = () => [];\nfunction MatRowDef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatRowDef.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatRowDef.ctorParameters;\n}\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MatHeaderRow extends _MatHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'mat-header-row',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                preserveWhitespaces: false,\n            },] },\n];\n/**\n * @nocollapse\n */\nMatHeaderRow.ctorParameters = () => [];\nfunction MatHeaderRow_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatHeaderRow.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatHeaderRow.ctorParameters;\n}\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MatRow extends _MatRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{selector: 'mat-row',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                preserveWhitespaces: false,\n            },] },\n];\n/**\n * @nocollapse\n */\nMatRow.ctorParameters = () => [];\nfunction MatRow_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatRow.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatRow.ctorParameters;\n}\n//# sourceMappingURL=row.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from '@angular/core';\nimport { MatTable } from './table';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { MatCell, MatHeaderCell, MatCellDef, MatHeaderCellDef, MatColumnDef } from './cell';\nimport { MatHeaderRow, MatRow, MatHeaderRowDef, MatRowDef } from './row';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nexport class MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CdkTableModule, CommonModule, MatCommonModule],\n                exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n                    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n                    MatHeaderRowDef, MatRowDef],\n                declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n                    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n                    MatHeaderRowDef, MatRowDef],\n            },] },\n];\n/**\n * @nocollapse\n */\nMatTableModule.ctorParameters = () => [];\nfunction MatTableModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatTableModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatTableModule.ctorParameters;\n}\n//# sourceMappingURL=table-module.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { combineLatest, map, RxChain, startWith } from '@angular/cdk/rxjs';\nimport { empty } from 'rxjs/observable/empty';\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Data accessor function that is used for accessing data properties for sorting.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            return isNaN(+value) ? value : +value;\n        };\n        /**\n         * Transforms data objects into a filter term that will be used to check against the filter if\n         * a filter is set. By default, the function will iterate over the values of the data object\n         * and convert them to a lowercase string.\n         * @param data Data object to convert to a string that checked for containing the filter term.\n         */\n        this.filterTermAccessor = (data) => {\n            const accumulator = (currentTerm, key) => currentTerm + data[key];\n            return Object.keys(data).reduce(accumulator, '').toLowerCase();\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * the filter matches data objects, provide a custom function on filterTermAccessor.\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // Otherwise, use an empty observable stream to take their place.\n        const /** @type {?} */ sortChange = this._sort ? this._sort.sortChange : empty();\n        const /** @type {?} */ pageChange = this._paginator ? this._paginator.page : empty();\n        if (this._renderChangesSubscription) {\n            this._renderChangesSubscription.unsubscribe();\n        }\n        this._renderChangesSubscription = RxChain.from(this._data)\n            .call(combineLatest, this._filter)\n            .call(map, ([data]) => this._filterData(data))\n            .call(combineLatest, startWith.call(sortChange, null))\n            .call(map, ([data]) => this._orderData(data))\n            .call(combineLatest, startWith.call(pageChange, null))\n            .call(map, ([data]) => this._pageData(data))\n            .subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overriden for customization.\n        const /** @type {?} */ filteredData = !this.filter ? data : data.filter(obj => {\n            return this.filterTermAccessor(obj).indexOf(this.filter) != -1;\n        });\n        if (this.paginator) {\n            this._updatePaginator(filteredData.length);\n        }\n        return filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort || !this.sort.active || this.sort.direction == '') {\n            return data;\n        }\n        const /** @type {?} */ active = this.sort.active;\n        const /** @type {?} */ direction = this.sort.direction;\n        return data.slice().sort((a, b) => {\n            let /** @type {?} */ valueA = this.sortingDataAccessor(a, active);\n            let /** @type {?} */ valueB = this.sortingDataAccessor(b, active);\n            return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n        });\n    }\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const /** @type {?} */ startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            if (!this.paginator) {\n                return;\n            }\n            this.paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (this.paginator.pageIndex > 0) {\n                const /** @type {?} */ lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n                this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\nfunction MatTableDataSource_tsickle_Closure_declarations() {\n    /**\n     * Stream that emits when a new data array is set on the data source.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._data;\n    /**\n     * Stream emitting render data to the table (depends on ordered data changes).\n     * @type {?}\n     */\n    MatTableDataSource.prototype._renderData;\n    /**\n     * Stream that emits when a new filter string is set on the data source.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._filter;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._renderChangesSubscription;\n    /** @type {?} */\n    MatTableDataSource.prototype._sort;\n    /** @type {?} */\n    MatTableDataSource.prototype._paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * \\@param data Data object that is being accessed.\n     * \\@param sortHeaderId The name of the column that represents the data.\n     * @type {?}\n     */\n    MatTableDataSource.prototype.sortingDataAccessor;\n    /**\n     * Transforms data objects into a filter term that will be used to check against the filter if\n     * a filter is set. By default, the function will iterate over the values of the data object\n     * and convert them to a lowercase string.\n     * \\@param data Data object to convert to a string that checked for containing the filter term.\n     * @type {?}\n     */\n    MatTableDataSource.prototype.filterTermAccessor;\n}\n//# sourceMappingURL=table-data-source.js.map","/**\n * Generated bundle index. Do not edit.\n */\nexport { MatTableModule, _MatCellDef, _MatHeaderCellDef, _MatColumnDef, _MatHeaderCell, _MatCell, MatCellDef, MatHeaderCellDef, MatColumnDef, MatHeaderCell, MatCell, _MatTable, MatTable, _MatHeaderRowDef, _MatCdkRowDef, _MatHeaderRow, _MatRow, MatHeaderRowDef, MatRowDef, MatHeaderRow, MatRow, MatTableDataSource } from './public-api';\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;;;;;;;;;;;;AASA;;;AAGA,AAAO,MAAM,SAAS,GAAG,QAAQ,CAAC;;;;AAIlC,AAAO,MAAM,QAAQ,SAAS,SAAS,CAAC;CACvC;AACD,QAAQ,CAAC,UAAU,GAAG;IAClB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,WAAW;gBACpC,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,kBAAkB;gBAC5B,MAAM,EAAE,CAAC,4OAA4O,CAAC;gBACtP,IAAI,EAAE;oBACF,OAAO,EAAE,WAAW;iBACvB;gBACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,mBAAmB,EAAE,KAAK;gBAC1B,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAClD,EAAE,EAAE;CAChB,CAAC;;;;AAIF,QAAQ,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC,AACnC,AAQC,AACD;;ACnCA;;;AAGA,AAAO,MAAM,WAAW,GAAG,UAAU,CAAC;AACtC,AAAO,MAAuB,iBAAiB,GAAG,gBAAgB,CAAC;AACnE,AAAO,MAAuB,aAAa,GAAG,YAAY,CAAC;AAC3D,AAAO,MAAuB,cAAc,GAAG,aAAa,CAAC;AAC7D,AAAO,MAAuB,QAAQ,GAAG,OAAO,CAAC;;;;;AAKjD,AAAO,MAAM,UAAU,SAAS,WAAW,CAAC;CAC3C;AACD,UAAU,CAAC,UAAU,GAAG;IACpB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,cAAc;gBACxB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC;aAChE,EAAE,EAAE;CAChB,CAAC;;;;AAIF,UAAU,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC;AACrC,AASA;;;;AAIA,AAAO,MAAM,gBAAgB,SAAS,iBAAiB,CAAC;CACvD;AACD,gBAAgB,CAAC,UAAU,GAAG;IAC1B,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,oBAAoB;gBAC9B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;aAC5E,EAAE,EAAE;CAChB,CAAC;;;;AAIF,gBAAgB,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC;AAC3C,AASA;;;;AAIA,AAAO,MAAM,YAAY,SAAS,aAAa,CAAC;CAC/C;AACD,YAAY,CAAC,UAAU,GAAG;IACtB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,gBAAgB;gBAC1B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;aACpE,EAAE,EAAE;CAChB,CAAC;;;;AAIF,YAAY,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC;AACvC,YAAY,CAAC,cAAc,GAAG;IAC1B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,EAAE,EAAE;CACtD,CAAC;AACF,AAgBA;;;AAGA,AAAO,MAAM,aAAa,SAAS,cAAc,CAAC;;;;;;IAM9C,WAAW,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE;QACzC,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACvC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;KAC/F;CACJ;AACD,aAAa,CAAC,UAAU,GAAG;IACvB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,iBAAiB;gBAC3B,IAAI,EAAE;oBACF,OAAO,EAAE,iBAAiB;oBAC1B,MAAM,EAAE,cAAc;iBACzB;aACJ,EAAE,EAAE;CAChB,CAAC;;;;AAIF,aAAa,CAAC,cAAc,GAAG,MAAM;IACjC,EAAE,IAAI,EAAE,YAAY,GAAG;IACvB,EAAE,IAAI,EAAE,UAAU,GAAG;IACrB,EAAE,IAAI,EAAE,SAAS,GAAG;CACvB,CAAC;AACF,AASA;;;AAGA,AAAO,MAAM,OAAO,SAAS,QAAQ,CAAC;;;;;;IAMlC,WAAW,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE;QACzC,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QACvC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;KAC/F;CACJ;AACD,OAAO,CAAC,UAAU,GAAG;IACjB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,UAAU;gBACpB,IAAI,EAAE;oBACF,OAAO,EAAE,UAAU;oBACnB,MAAM,EAAE,UAAU;iBACrB;aACJ,EAAE,EAAE;CAChB,CAAC;;;;AAIF,OAAO,CAAC,cAAc,GAAG,MAAM;IAC3B,EAAE,IAAI,EAAE,YAAY,GAAG;IACvB,EAAE,IAAI,EAAE,UAAU,GAAG;IACrB,EAAE,IAAI,EAAE,SAAS,GAAG;CACvB,CAAC,AACF,AAQC,AACD;;AC7KA;;;AAGA,AAAO,MAAM,gBAAgB,GAAG,eAAe,CAAC;AAChD,AAAO,MAAuB,aAAa,GAAG,SAAS,CAAC;AACxD,AAAO,MAAuB,aAAa,GAAG,YAAY,CAAC;AAC3D,AAAO,MAAuB,OAAO,GAAG,MAAM,CAAC;;;;;AAK/C,AAAO,MAAM,eAAe,SAAS,gBAAgB,CAAC;CACrD;AACD,eAAe,CAAC,UAAU,GAAG;IACzB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,mBAAmB;gBAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;gBACvE,MAAM,EAAE,CAAC,0BAA0B,CAAC;aACvC,EAAE,EAAE;CAChB,CAAC;;;;AAIF,eAAe,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC;AAC1C,AASA;;;;;AAKA,AAAO,MAAM,SAAS,SAAS,aAAa,CAAC;CAC5C;AACD,SAAS,CAAC,UAAU,GAAG;IACnB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACd,QAAQ,EAAE,aAAa;gBACvB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;gBAC3D,MAAM,EAAE,CAAC,2BAA2B,EAAE,qBAAqB,CAAC;aAC/D,EAAE,EAAE;CAChB,CAAC;;;;AAIF,SAAS,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC;AACpC,AASA;;;AAGA,AAAO,MAAM,YAAY,SAAS,aAAa,CAAC;CAC/C;AACD,YAAY,CAAC,UAAU,GAAG;IACtB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,gBAAgB;gBACzC,QAAQ,EAAE,gBAAgB;gBAC1B,IAAI,EAAE;oBACF,OAAO,EAAE,gBAAgB;oBACzB,MAAM,EAAE,KAAK;iBAChB;gBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,QAAQ,EAAE,cAAc;gBACxB,mBAAmB,EAAE,KAAK;aAC7B,EAAE,EAAE;CAChB,CAAC;;;;AAIF,YAAY,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC;AACvC,AASA;;;AAGA,AAAO,MAAM,MAAM,SAAS,OAAO,CAAC;CACnC;AACD,MAAM,CAAC,UAAU,GAAG;IAChB,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,SAAS;gBAClC,QAAQ,EAAE,gBAAgB;gBAC1B,IAAI,EAAE;oBACF,OAAO,EAAE,SAAS;oBAClB,MAAM,EAAE,KAAK;iBAChB;gBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,QAAQ,EAAE,QAAQ;gBAClB,mBAAmB,EAAE,KAAK;aAC7B,EAAE,EAAE;CAChB,CAAC;;;;AAIF,MAAM,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC,AACjC,AAQC,AACD;;ACrHO,MAAM,cAAc,CAAC;CAC3B;AACD,cAAc,CAAC,UAAU,GAAG;IACxB,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACb,OAAO,EAAE,CAAC,cAAc,EAAE,YAAY,EAAE,eAAe,CAAC;gBACxD,OAAO,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,gBAAgB,EAAE,YAAY;oBAC1D,aAAa,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM;oBAC5C,eAAe,EAAE,SAAS,CAAC;gBAC/B,YAAY,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,gBAAgB,EAAE,YAAY;oBAC/D,aAAa,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM;oBAC5C,eAAe,EAAE,SAAS,CAAC;aAClC,EAAE,EAAE;CAChB,CAAC;;;;AAIF,cAAc,CAAC,cAAc,GAAG,MAAM,EAAE,CAAC,AACzC,AAQC,AACD;;AC9BA;;;;;;;;AAQA,AAAO,MAAM,kBAAkB,CAAC;;;;IAI5B,WAAW,CAAC,WAAW,GAAG,EAAE,EAAE;;;;QAI1B,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;;;;QAI3C,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;;;;;;;;;QASvC,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,EAAE,YAAY,KAAK;YAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,OAAO,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC;SACzC,CAAC;;;;;;;QAOF,IAAI,CAAC,kBAAkB,GAAG,CAAC,IAAI,KAAK;YAChC,MAAM,WAAW,GAAG,CAAC,WAAW,EAAE,GAAG,KAAK,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAClE,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;SAClE,CAAC;QACF,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAI,CAAC,yBAAyB,EAAE,CAAC;KACpC;;;;;;IAMD,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;;;;IAIzC,IAAI,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;;;;;;;IAOvC,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;;;;IAIjD,IAAI,MAAM,GAAG,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;;;;;;IAO3C,IAAI,IAAI,CAAC,IAAI,EAAE;QACX,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,yBAAyB,EAAE,CAAC;KACpC;;;;IAID,IAAI,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;;;;;;;;;;;;;IAajC,IAAI,SAAS,CAAC,SAAS,EAAE;QACrB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,yBAAyB,EAAE,CAAC;KACpC;;;;IAID,IAAI,SAAS,GAAG,EAAE,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;;;;;;;IAO3C,yBAAyB,GAAG;;;QAGxB,uBAAuB,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,EAAE,CAAC;QACjF,uBAAuB,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,KAAK,EAAE,CAAC;QACrF,IAAI,IAAI,CAAC,0BAA0B,EAAE;YACjC,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;SACjD;QACD,IAAI,CAAC,0BAA0B,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;aACrD,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC;aACjC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aAC7C,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACrD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aAC5C,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACrD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aAC3C,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACvD;;;;;;;;IAQD,WAAW,CAAC,IAAI,EAAE;;;;QAId,uBAAuB,YAAY,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI;YAC3E,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SAClE,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAC9C;QACD,OAAO,YAAY,CAAC;KACvB;;;;;;;;IAQD,UAAU,CAAC,IAAI,EAAE;;QAEb,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,EAAE,EAAE;YAC9D,OAAO,IAAI,CAAC;SACf;QACD,uBAAuB,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACjD,uBAAuB,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QACvD,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;YAC/B,qBAAqB,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAClE,qBAAqB,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAClE,OAAO,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACrE,CAAC,CAAC;KACN;;;;;;;IAOD,SAAS,CAAC,IAAI,EAAE;QACZ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO,IAAI,CAAC;SACf;QACD,uBAAuB,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QACvF,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KACnE;;;;;;;;IAQD,gBAAgB,CAAC,kBAAkB,EAAE;QACjC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM;YACzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACjB,OAAO;aACV;YACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,kBAAkB,CAAC;;YAE3C,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,EAAE;gBAC9B,uBAAuB,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC3G,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;aAChF;SACJ,CAAC,CAAC;KACN;;;;;;IAMD,OAAO,GAAG,EAAE,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;;;;;;IAMtC,UAAU,GAAG,GAAG;CACnB,AACD,AA4CC,AACD;;ACxQA;;GAEG,AACH,AAA+U,AAC/U;;"}